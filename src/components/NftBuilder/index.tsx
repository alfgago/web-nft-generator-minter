/* eslint-disable @typescript-eslint/no-unused-vars */
import { useEffect, useState } from "react"
import axios from "axios"
import { NFTStorage } from "nft.storage"
import pLimit from "p-limit"

import {
  b64toBlob,
  bulkMint,
  deployContract,
  setFolderStorage,
  uploadFolder,
  uploadNft,
} from "@/utils/mintUtils"

import SimpleHeader from "../Common/SimpleHeader"

import { useRequestStatus } from "./Hooks/useRequestStatus"
import ConfirmationStep from "./ConfirmationStep"
import ConfirmationStepSingle from "./ConfirmationStepSingle"
import DesignStep from "./DesignStep"
import DesignStepSingle from "./DesignStepSingle"
import FormStep from "./FormStep"
import { NftBuilderStyles } from "./NftBuilderStyles"
import StepsHeader from "./StepsHeader"

const NFT_STORAGE_TOKEN = process.env.NEXT_PUBLIC_NFT_STORAGE_KEY ?? ""
const storage = new NFTStorage({ token: NFT_STORAGE_TOKEN })

declare global {
  interface Window {
    canvas: any
    uploadedNfts: any
  }
}

const NftBuilder = ({ artists }: any) => {
  const [nftTitle, setNftTitle] = useState("")
  const [nftDescription, setNftDescription] = useState("")
  const [images, setImages] = useState([])
  const [defaultImage, setDefaultImage] = useState("")
  const [activeStep, setActiveStep] = useState(1)
  const [uploading, setUploading] = useState(false)
  const [uploadedCount, setUploadedCount] = useState(0)
  const [selectedArtist, setSelectedArtist] = useState(artists[0])
  const [selectedShow, setSelectedShow] = useState(artists[0])
  const [errorMessage, setErrorMessage] = useState("")
  const [contractAddress, setContractAddress] = useState("")
  const [contractDeployed, setContractDeployed] = useState(false)
  const [imageUrl, setImageUrl] = useState("")
  const [formValues, setFormValues] = useState({
    name: "AUTOGENERATED",
    wallet: "",
    size: "10",
    passType: "Circle",
    saleType: "Fixed",
    price: "0.1",
    duration: "24",
    winners: "5",
    date: new Date(),
    is_charity: false,
    charity_name: "",
    charity_royalty: "",
    artistName: "",
    memberName: "",
  })

  const {
    requestStatus: contractDeployStatus,
    requestData,
    setRequestId,
  } = useRequestStatus()

  useEffect(() => {
    if (contractAddress) {
      console.log("Contract: " + contractAddress)
      createCollection()
    }
  }, [contractAddress])

  useEffect(() => {
    if (requestData?.contractAddress) {
      setContractAddress(requestData.contractAddress)
    }
  }, [requestData])

  useEffect(() => {
    // @ts-ignore
    window.canvas = false
    window.uploadedNfts = 0
    sessionStorage.removeItem("collectionData")
    sessionStorage.removeItem("canvasJson")
    setUploading(false)
  }, [])

  const nextStep = () => {
    setActiveStep(activeStep + 1)
  }

  const previousStep = () => {
    setActiveStep(activeStep - 1)
  }

  const onFormSave = (values: any) => {
    nextStep()
    setFormValues(values)
    console.log(values)
  }

  const submit = async (imges: any) => {
    setImages(imges)
    setUploading(true)
    setUploadedCount(0)

    try {
      const reqId = await deployContract(formValues)
      setRequestId(reqId)
    } catch (error) {
      setErrorMessage(JSON.stringify(error))
    }
  }

  // This is called when contractAddress is set
  const createCollection = async () => {
    const premint = formValues.saleType == "Auction"
    if (uploading) {
      const batchSize = 5
      let previewImageUrl = ""
      // @ts-ignore
      if (!images[0].startsWith("ipfs://")) {
        // Upload first image to use as preview
        const blob = b64toBlob(images[0])
        const nftKey = await storage.storeBlob(blob)
        previewImageUrl = "https://plusonemusic.io/ipfs/" + nftKey
      } else {
        // @ts-ignore
        previewImageUrl = images[0].replace(
          "ipfs://",
          "https://plusonemusic.io/ipfs/"
        )
      }
      // Creates the pass, to then associate NFTs to it
      const passResponse = await axios.post("/api/passes/create", {
        ...formValues,
        contract_address: contractAddress,
        preview_image_url: previewImageUrl,
      })

      // Array used to store the metadata files that will be later uploaded
      const metadatas: any[] = []
      const limit = pLimit(batchSize)
      for (let i = 0; i < images.length; i += batchSize) {
        const batch = images.slice(i, i + batchSize)
        const promises = batch.map((image: any, j: number) => {
          if (image) {
            setUploadedCount(i + j)
            return limit(() =>
              uploadNft(
                image,
                passResponse.data.data.id,
                i + j,
                metadatas,
                formValues,
                nftTitle
              )
            )
          }
        })
        await Promise.all(promises)
        // NFT Storage limits to 10 requests every 5 seconds, add wait
        await new Promise((resolve) => setTimeout(resolve, 5 * 1000))
      }
      if (premint) {
        try {
          const folderCid = await uploadFolder(contractAddress, metadatas)
          await setFolderStorage(contractAddress, folderCid)
          await bulkMint(contractAddress, formValues.size)
          await axios.post("/api/passes/update-folder", {
            id: passResponse.data.data.id,
            folderCid: folderCid,
          })
        } catch (error) {
          setErrorMessage(JSON.stringify(error))
        }
      } else {
        setSaleState()
      }
      setUploading(false)
      setContractDeployed(true)
    }
  }

  const setSaleState = async () => {
    const res = await fetch("/api/contracts/setSaleState", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        contractAddress,
        network: "goerli",
        saleState: 6, // the state that opens the sale
      }),
    })

    if (!res.ok) throw new Error("Set Sale State failed" + (await res.json()))

    const { transactionHash } = await res.json()

    console.log("Set Sale State Transaction Hash: " + transactionHash)
  }

  return (
    <NftBuilderStyles>
      <SimpleHeader title="NFT Collection Generator" />
      <StepsHeader activeStep={activeStep} />
      <section className="steps">
        <div className="content">
          {activeStep == 1 && (
            <FormStep
              formValues={formValues}
              nextAction={onFormSave}
              artists={artists}
              setNftTitle={setNftTitle}
              nftTitle={nftTitle}
              nftDescription={nftDescription}
              setNftDescription={setNftDescription}
              setDefaultImage={setDefaultImage}
              setSelectedArtist={setSelectedArtist}
              selectedArtist={selectedArtist}
              setSelectedShow={setSelectedShow}
              selectedShow={selectedShow}
            />
          )}
          {activeStep == 2 && (
            <>
              {formValues.passType == "Single Event" ? (
                <DesignStepSingle
                  nextAction={nextStep}
                  previousAction={previousStep}
                  defaultImage={defaultImage}
                  selectedShow={selectedShow}
                  imageUrl={imageUrl}
                  setImageUrl={setImageUrl}
                />
              ) : (
                <DesignStep
                  nftName={formValues.name}
                  nextAction={nextStep}
                  previousAction={previousStep}
                  formValues={formValues}
                  defaultImage={defaultImage}
                  imageUrl={imageUrl}
                  setImageUrl={setImageUrl}
                />
              )}
            </>
          )}
          {activeStep == 3 && (
            <>
              {formValues.passType == "Single Event" ? (
                <ConfirmationStepSingle
                  formValues={formValues}
                  imageUrl={imageUrl}
                  selectedShow={selectedShow}
                  nftName={formValues.name}
                  nextAction={submit}
                  previousAction={previousStep}
                  uploading={uploading}
                  uploaded={uploadedCount}
                  contractDeployed={contractDeployed}
                  contractAddress={contractAddress}
                  errorMessage={errorMessage}
                  setUploading={setUploading}
                />
              ) : (
                <ConfirmationStep
                  formValues={formValues}
                  nextAction={submit}
                  previousAction={previousStep}
                  uploading={uploading}
                  uploaded={uploadedCount}
                  contractDeployed={contractDeployed}
                  contractAddress={contractAddress}
                  errorMessage={errorMessage}
                />
              )}
            </>
          )}
        </div>
      </section>
    </NftBuilderStyles>
  )
}

export default NftBuilder
