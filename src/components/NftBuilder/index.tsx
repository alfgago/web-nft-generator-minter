import { useEffect, useState } from "react"

import SimpleHeader from "../Common/SimpleHeader"

import { useRequestStatus } from "./Hooks/useRequestStatus"
import ConfirmationStep from "./ConfirmationStep"
import DesignStep from "./DesignStep"
import FormStep from "./FormStep"
import { NftBuilderStyles } from "./NftBuilderStyles"
import StepsHeader from "./StepsHeader"

const NftBuilder = ({ artists }: any) => {
  const [activeStep, setActiveStep] = useState(1)
  const [selectedArtist, setSelectedArtist] = useState(artists[0])
  const { requestStatus: contractDeployStatus, setRequestId } =
    useRequestStatus()

  const [formValues, setFormValues] = useState({
    name: "AUTOGENERATED",
    wallet: "",
    size: "100",
    passType: "lottery",
    saleType: "auction",
    price: "0.1",
    duration: "24",
    date: new Date(),
  })

  useEffect(() => {
    window.canvas = false
  }, [])

  const nextStep = () => {
    setActiveStep(activeStep + 1)
  }

  const previousStep = () => {
    setActiveStep(activeStep - 1)
  }

  const onFormSave = (values: any) => {
    nextStep()
    setSelectedArtist(artists[values.artist])
    setFormValues(values)
  }

  const submit = async () => {
    alert("Confirm. Next step is integration with Blockchain API")
    console.log(formValues)
    const res = await fetch("/api/contracts", {
      method: "POST",
      body: JSON.stringify(formValues),
    })

    if (!res.ok) {
      const { err } = await res.json()
      alert("Error: " + err)
    }

    const { requestId } = await res.json()
    setRequestId(requestId)
  }

  return (
    <NftBuilderStyles>
      <SimpleHeader title="NFT Art Generator" />
      <StepsHeader activeStep={activeStep} />
      <section className="steps">
        <div className="content">
          {activeStep == 1 && (
            <FormStep
              formValues={formValues}
              nextAction={onFormSave}
              artists={artists}
            />
          )}
          {activeStep == 2 && (
            <DesignStep
              nftName={formValues.name}
              nextAction={nextStep}
              previousAction={previousStep}
              artist={selectedArtist}
            />
          )}
          {activeStep == 3 && (
            <ConfirmationStep
              formValues={formValues}
              nextAction={submit}
              previousAction={previousStep}
            />
          )}
        </div>
      </section>
      {/* TODO - Show different display states */}
      {contractDeployStatus === "pending" && null}
      {contractDeployStatus === "succeeded" && null}
      {contractDeployStatus === "failed" && null}
    </NftBuilderStyles>
  )
}

export default NftBuilder
